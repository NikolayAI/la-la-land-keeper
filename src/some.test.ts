import {  allSettled,  combine,  createEffect,  createEvent,  createStore,  fork,  forward} from 'effector';test('edge case', async () => {  const enableFeature = createEvent();  const $isCountryPage = createStore(false, { sid: 'country' });  const $isFeatureEnabled = createStore(false, { sid: 'feature' }).on(    enableFeature,    () => true,  );  const $isWidgetEnabled = combine([$isCountryPage, $isFeatureEnabled], s =>    s.every(Boolean),  );  const scope = fork({ values: [[$isCountryPage, true]] });  await allSettled(enableFeature, { scope });  expect(scope.getState($isWidgetEnabled)).toBe(true);});test('usage with domain', async () => {  const add = createEvent<number>();  const $count = createStore(0).on(add, (n, x) => n + x);  const addFx = createEffect(() => 0);  forward({ from: addFx.doneData, to: add });  const scope = fork({    values: [[$count, 10]],    handlers: [[addFx, () => 5]],  });  await allSettled(addFx, { scope });  expect(scope.getState($count)).toBe(15);  expect($count.getState()).toBe(0);});