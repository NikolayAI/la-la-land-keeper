import { allSettled, fork } from 'effector';import { handleNotifications } from './model';import { notificationsModel } from '../../../entities/notifications';import { productsModel } from '../../../entities/products';import { tablesModel } from '../../../entities/tables';import { TableProductTimerStatuses } from '../../../shared/api';test(`$tableProductsTimersNotifications should take data when $tablesProductsTimersOutOfLimits updated`, async () => {  const fn = jest.fn();  const scope = fork({    values: [      [productsModel.$products, {        3: {          id: '3',          title: 'test product',          price: 5,          isPiece: true,          needTimer: true,          eachProductUnitMinutesTimer: 20,        }      }]    ],    handlers: [      [tablesModel.getTablesFx, () => ({        1: {          id: '1',          title: 'test table',          products: {            3: {              units: 1,              id: '3',              title: 'test product',              needTimer: true,              minutesTimer: 30,              timerStatus: TableProductTimerStatuses.PLAY,              eachProductUnitMinutesTimer: 20,            }          },        }      })      ],    ]  });  await allSettled(tablesModel.getTablesFx, { scope });  await allSettled(handleNotifications, { scope });  expect(scope.getState(notificationsModel.$tableProductsTimersNotifications)).toHaveLength(1);});test(`$tableProductsTimersNotifications should not take data when $tablesProductsTimersOutOfLimits updated`, async () => {  const scope = fork({    values: [      [productsModel.$products, {        3: {          id: '3',          title: 'test product',          price: 5,          isPiece: true,          needTimer: true,          eachProductUnitMinutesTimer: 20,        }      }]    ],    handlers: [[tablesModel.getTablesFx, () => ({      1: {        id: '1',        title: 'test table',        products: {          3: {            units: 1,            id: '3',            title: 'test product',            needTimer: true,            minutesTimer: 10,            timerStatus: TableProductTimerStatuses.PLAY,            eachProductUnitMinutesTimer: 20,          }        },      }    })]]  });  await allSettled(tablesModel.getTablesFx, { scope });  await allSettled(handleNotifications, { scope });  expect(scope.getState(notificationsModel.$tableProductsTimersNotifications)).toStrictEqual([]);});