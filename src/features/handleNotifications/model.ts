import { createEvent, forward, sample } from 'effector';import { INotification, NotificationKinds, notificationsModel } from '../../entities/notifications';import { productsModel } from '../../entities/products';import { tablesModel } from '../../entities/tables';export const sendNotification = createEvent();export const closeNotification = createEvent<INotification>();forward({  from: closeNotification,  to: notificationsModel.deleteNotification,});sample({  clock: tablesModel.$isTablesProductsTimersOutOfLimits,  source: [    tablesModel.$isTablesProductsTimersOutOfLimits,    tablesModel.$tables,    productsModel.$products,  ],  fn: ([timers, tables, products]) => {    const result = [];    for (const tableId in timers) {      for (const productId in timers[tableId]) {        if (timers[tableId][productId]) {          result.push({            tableId,            productId,            kind: NotificationKinds.ERROR,            message: `Время для ${products[productId]?.title} на столе ${tables[tableId]?.title} истекло`,          });        }      }    }    return result;  },  target: notificationsModel.$tableProductsTimersNotifications,});