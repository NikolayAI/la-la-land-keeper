import { useEffect, useRef } from 'react';import { ISetTableProductTimerParams, TableProductTimerStatuses } from '../api';interface IUseTimer {  tableId: string;  productId: string;  timerCount: number,  isTimerPlay: boolean;  handleSetTimer: (payload: ISetTableProductTimerParams) => void;  timerStatus: TableProductTimerStatuses;  interval: number;}export interface ITableProductTimerRef {  interval: NodeJS.Timeout | null;  value: number;  isTimerPlay: boolean;}export const useTimer = ({  tableId,  productId,  timerCount,  isTimerPlay,  handleSetTimer,  timerStatus,  interval,}: IUseTimer) => {  const ref = useRef<ITableProductTimerRef>({    interval: null,    value: 0,    isTimerPlay: true  });  ref.current.value = timerCount;  ref.current.isTimerPlay = isTimerPlay;  useEffect(() => {    if (!ref.current.isTimerPlay) {      if (ref.current.interval) {        clearInterval(ref.current.interval);        ref.current.interval = null;      }    }    if (ref.current.isTimerPlay) {      if (!ref.current.interval) {        ref.current.interval = setInterval(() => {          handleSetTimer({            tableId,            productId,            value: ++ref.current.value          });        }, interval);      }    }    return () => {      if (ref.current.interval) {        clearInterval(ref.current.interval);        ref.current.interval = null;      }    };  }, [timerStatus]);};