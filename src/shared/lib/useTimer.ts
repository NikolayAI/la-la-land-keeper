import { useEffect, useRef } from 'react';import { dateToSeconds } from './formatDate';import {  ISetTablesProductsTimersParams,  TableProductTimerStatuses} from '../api';interface IUseTimer {  tableId: string;  productId: string;  createdAt: string | Date,  isTimerPlay: boolean;  timerStatus: TableProductTimerStatuses;  interval: number;  setTimer: (payload: ISetTablesProductsTimersParams) => void;}export interface ITableProductTimerRef {  interval: NodeJS.Timeout | null;  isTimerPlay: boolean;}export const useTimer = ({  tableId,  productId,  createdAt,  isTimerPlay,  timerStatus,  interval,  setTimer,}: IUseTimer) => {  const ref = useRef<ITableProductTimerRef>({    interval: null,    isTimerPlay: true  });  ref.current.isTimerPlay = isTimerPlay;  useEffect(() => {    setTimer({      tableId,      productId,      value: dateToSeconds(Number(new Date()) - Number(new Date(createdAt)))    });  }, []);  useEffect(() => {    if (!ref.current.isTimerPlay) {      if (ref.current.interval) {        clearInterval(ref.current.interval);        ref.current.interval = null;      }    }    if (ref.current.isTimerPlay) {      if (!ref.current.interval) {        ref.current.interval = setInterval(() => {          setTimer({            tableId,            productId,            value: dateToSeconds(Number(new Date()) - Number(new Date(createdAt)))          });        }, interval);      }    }    return () => {      if (ref.current.interval) {        clearInterval(ref.current.interval);        ref.current.interval = null;      }    };  }, [timerStatus]);};