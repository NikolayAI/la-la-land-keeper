import { useEffect, useRef } from 'react';import { dateToSeconds } from './formatDate';import {  ISetTablesProductsTimersParams,  TableProductTimerStatuses} from '../api';interface IUseTimer {  tableId: string;  productId: string;  createdAt: string | Date,  isTimerPlay: boolean;  timerStatus: TableProductTimerStatuses;  interval: number;  setTimer: (payload: ISetTablesProductsTimersParams) => void;}export interface ITableProductTimerRef {  interval: NodeJS.Timeout | null;  isTimerPlay: boolean;  pausedAt: Date | null;  pausedTimerCount: number;}export const useTimer = ({  tableId,  productId,  createdAt,  isTimerPlay,  timerStatus,  interval,  setTimer,}: IUseTimer) => {  const ref = useRef<ITableProductTimerRef>({    interval: null,    isTimerPlay: false,    pausedAt: null,    pausedTimerCount: 0,  });  ref.current.isTimerPlay = isTimerPlay;  useEffect(() => {    const value = Number(dateToSeconds(Number(new Date()) - Number(new Date(createdAt))));    setTimer({      tableId,      productId,      value,    });  }, []);  useEffect(() => {    if (!ref.current.isTimerPlay) {      ref.current.pausedAt = new Date();    }    console.log('hello: ', ref.current.pausedAt);    if (ref.current.isTimerPlay) {      const pausedAt = ref.current.pausedAt ? ref.current.pausedAt : 0;      // @ts-ignore      ref.current.pausedTimerCount = ref.current.pausedTimerCount + dateToSeconds(new Date() - new Date(pausedAt));    }    console.log('hello1: ', ref.current.pausedTimerCount);    if (!ref.current.interval) {      ref.current.interval = setInterval(() => {        if (ref.current.isTimerPlay) {          const value = dateToSeconds(Number(new Date()) - Number(new Date(createdAt))) - ref.current.pausedTimerCount;          setTimer({            tableId,            productId,            value,          });        }      }, interval);    }    return () => {      if (ref.current.interval) {        clearInterval(ref.current.interval);        ref.current.interval = null;      }    };  }, [timerStatus]);};