import { allSettled, fork } from 'effector';import { tablesModel } from '../tables';import {  addProductToTable,  clearTable,  createTable,  decreaseTableProduct,  deleteProductFromTable,  deleteTable,  increaseTableProduct,  setTableProductTimer,  setTableProductTimerStatus,  setTableTitle,} from '../../shared/api/tables';import { TableProductTimerStatuses } from '../../shared/api';jest.mock('../../shared/api/tables');const mockCreateTable = createTable as jest.MockedFunction<typeof createTable>;const mockDeleteTable = deleteTable as jest.MockedFunction<typeof deleteTable>;const mockSetTableTitle = setTableTitle as jest.MockedFunction<typeof setTableTitle>;const mockAddProductToTable = addProductToTable as jest.MockedFunction<typeof addProductToTable>;const mockDeleteProductFromTable = deleteProductFromTable as jest.MockedFunction<typeof deleteProductFromTable>;const mockClearTable = clearTable as jest.MockedFunction<typeof clearTable>;const mockIncreaseTableProduct = increaseTableProduct as jest.MockedFunction<typeof increaseTableProduct>;const mockDecreaseTableProduct = decreaseTableProduct as jest.MockedFunction<typeof decreaseTableProduct>;const mockSetTableProductTimer = setTableProductTimer as jest.MockedFunction<typeof setTableProductTimer>;const mockSetTableProductTimerStatus = setTableProductTimerStatus as jest.MockedFunction<typeof setTableProductTimerStatus>;test('createTableFx should calls TablesAPI.createTable', async () => {  const scope = fork();  await allSettled(tablesModel.createTableFx, { scope });  expect(mockCreateTable).toHaveBeenCalledTimes(1);});test('deleteTableFx should calls TablesAPI.deleteTable', async () => {  const scope = fork();  await allSettled(tablesModel.deleteTableFx, { scope, params: { id: '1' } });  expect(mockDeleteTable).toHaveBeenCalledTimes(1);});test('setTitleFx should calls TablesAPI.setTableTitle', async () => {  const scope = fork();  await allSettled(tablesModel.setTitleFx, {    scope,    params: { id: '1', text: 'test' }  });  expect(mockSetTableTitle).toHaveBeenCalledTimes(1);});test('addProductFx should calls TablesAPI.addProductToTable', async () => {  const scope = fork();  await allSettled(tablesModel.addProductFx, {    scope,    params: { tableId: '1', productId: '2' }  });  expect(mockAddProductToTable).toHaveBeenCalledTimes(1);});test('deleteProductFx should calls TablesAPI.deleteProductFromTable', async () => {  const scope = fork();  await allSettled(tablesModel.deleteProductFx, {    scope,    params: { tableId: '1', productId: '2' }  });  expect(mockDeleteProductFromTable).toHaveBeenCalledTimes(1);});test('clearTableFx should calls TablesAPI.clearTable', async () => {  const scope = fork();  await allSettled(tablesModel.clearTableFx, {    scope,    params: { tableId: '1' }  });  expect(mockClearTable).toHaveBeenCalledTimes(1);});test('increaseTableProductFx should calls TablesAPI.increaseTableProduct', async () => {  const scope = fork();  await allSettled(tablesModel.increaseTableProductFx, {    scope,    params: { tableId: '1', productId: '2' }  });  expect(mockIncreaseTableProduct).toHaveBeenCalledTimes(1);});test('decreaseTableProductFx should calls TablesAPI.decreaseTableProduct', async () => {  const scope = fork();  await allSettled(tablesModel.decreaseTableProductFx, {    scope,    params: { tableId: '1', productId: '2' }  });  expect(mockDecreaseTableProduct).toHaveBeenCalledTimes(1);});test('setTableProductTimerFx should calls TablesAPI.setTableProductTimer', async () => {  const scope = fork();  await allSettled(tablesModel.setTableProductTimerFx, {    scope,    params: { tableId: '1', productId: '2', value: 1 }  });  expect(mockSetTableProductTimer).toHaveBeenCalledTimes(1);});test('setTableProductTimerStatusFx should calls TablesAPI.setTableProductTimerStatus', async () => {  const scope = fork();  await allSettled(tablesModel.setTableProductTimerStatusFx, {    scope,    params: {      tableId: '1',      productId: '2',      value: TableProductTimerStatuses.STOP    }  });  expect(mockSetTableProductTimerStatus).toHaveBeenCalledTimes(1);});test(`$tablesProductsTimersOutOfLimits should not calculate boolean values`, async () => {  const scope = fork({    values: [[tablesModel.$tables, {      1: {        id: '1',        title: 'test',        products: {          2: {            units: 1,          }        },      }    }]]  });  expect(scope.getState(tablesModel.$tablesProductsTimersOutOfLimits)).toStrictEqual({ 1: {} });});test(`$tablesProductsTimersOutOfLimits should calculate boolean values`, async () => {  const scope = fork({    values: [[tablesModel.$tables, {      1: {        id: '1',        title: 'test',        products: {          2: {            units: 1,            needTimer: true,            minutesTimer: 0,            timerStatus: TableProductTimerStatuses.STOP,            eachProductUnitMinutesTimer: 20,          }        },      }    }]]  });  expect(scope.getState(tablesModel.$tablesProductsTimersOutOfLimits)).toStrictEqual({    1: { 2: false }  });});