import { allSettled, fork } from 'effector';import { productsModel } from '.';import { defaultProduct } from './constants';import { createProduct, deleteProduct } from '../../shared/api/products';const params = {  id: '1',  title: 'test',  price: 1,  isPiece: false,  needTimer: false,  eachProductUnitMinutesTimer: 0,};jest.mock('../../shared/api/products');const mockCreateProduct = createProduct as jest.MockedFunction<typeof createProduct>;const mockDeleteProduct = deleteProduct as jest.MockedFunction<typeof deleteProduct>;test('createProductFx should calls ProductsAPI.createProduct', async () => {  const scope = fork();  await allSettled(productsModel.createProductFx, { scope, params });  expect(mockCreateProduct).toHaveBeenCalledTimes(1);});test('deleteProductFx should calls ProductsAPI.deleteProduct', async () => {  const scope = fork();  await allSettled(productsModel.deleteProductFx, { scope, params });  expect(mockDeleteProduct).toHaveBeenCalledTimes(1);});test('setProductProperty should set data to $product', async () => {  const scope = fork({    values: [[productsModel.$product, defaultProduct]]  });  await allSettled(productsModel.setProductProperty, {    scope,    params: {      key: 'title',      value: 'test',    }  });  expect(scope.getState(productsModel.$product)).toStrictEqual({    id: '',    title: 'test',    price: 0,    isPiece: true,    needTimer: false,    eachProductUnitMinutesTimer: 0,  });});